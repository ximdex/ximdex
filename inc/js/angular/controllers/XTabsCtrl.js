// Generated by CoffeeScript 1.8.0
angular.module("ximdex.main.controller").controller("XTabsCtrl", [
  "$scope", "xTabs", "xUrlHelper", "$http", "$interval", "$window", "$timeout", function($scope, xTabs, xUrlHelper, $http, $interval, $window, $timeout) {
    $scope.tabs = xTabs.getTabs();
    $scope.removeTab = xTabs.removeTab;
    $scope.setActiveTab = xTabs.setActive;
    $scope.closeAllTabs = xTabs.closeAll;
    $scope.offAllTabs = xTabs.offAll;
    $scope.activeIndex = xTabs.activeIndex;
    $scope.submitForm = xTabs.submitForm;
    $scope.closeTabById = xTabs.removeTabById;
    $scope.reloadTabById = xTabs.reloadTabById;
    $scope.openAction = function(action, nodes) {
      var n, newNode, nodesArray, _i, _len;
      nodesArray = [];
      if (Array.isArray(nodes)) {
        for (_i = 0, _len = nodes.length; _i < _len; _i++) {
          n = nodes[_i];
          newNode = {
            nodeid: n
          };
          nodesArray.push(newNode);
        }
      } else if (nodes) {
        nodesArray.push({
          nodeid: nodes
        });
      }
      xTabs.pushTab(action, nodesArray);
    };
    $scope.menuTabsEnabled = false;
    $scope.showingMenu = false;
    $scope.limitTabs = 9999999;
    $scope.reloadWelcomeTab = function() {
      var nodes, url;
      nodes = [
        {
          nodeid: 10000
        }
      ];
      url = xUrlHelper.getAction({
        action: "welcome",
        nodes: nodes
      });
      $http.get(url).success(function(data) {
        var newtab;
        if (data) {
          newtab = {
            id: "10000_welcome",
            name: "welcome",
            content: data,
            nodes: nodes,
            action: null,
            command: "welcome",
            blink: false,
            show: true,
            url: url
          };
          xTabs.loadCssAndJs(newtab);
        }
      });
    };
    $scope.reloadWelcomeTab();
    $scope.closeMenu = function() {
      $scope.showingMenu = false;
    };
    $scope.$on("onModifyTabs", function() {
      var container, containerPosition, containerWidth, contents, contentsWidth, rtContainer, temp;
      temp = angular.element('#angular-content > .hbox-panel > .tabs-container');
      containerPosition = temp.offset();
      container = angular.element('#angular-content > .hbox-panel > .tabs-container > ul.ui-tabs-nav');
      containerWidth = temp.width();
      contents = angular.element('#angular-content > .hbox-panel > .tabs-container > ul.ui-tabs-nav > li');
      contentsWidth = 0;
      rtContainer = angular.element($window).width() - (containerPosition.left + temp.outerWidth());
      contents.each(function(index, element) {
        if (index === 0) {
          return;
        }
        return contentsWidth += angular.element(element).width() + 2;
      });
      if (containerWidth - 30 < contentsWidth) {
        container.css("left", (containerWidth - contentsWidth - 30) + "px");
        $scope.menuTabsEnabled = true;
      } else {
        container.css("left", "0px");
        $scope.menuTabsEnabled = false;
      }
      if ($scope.activeIndex() === $scope.tabs.length - 1) {
        $scope.limitTabs = $scope.activeIndex() + 1;
      }
    });
    return $scope.$on('onChangeActiveTab', function() {
      var a, container, containerPosition, elementPosition, i, idContent, rtContainer, rtElement, _i, _len, _ref;
      if (!$scope.menuTabsEnabled) {
        return;
      }
      containerPosition = angular.element('#angular-content > .hbox-panel > .tabs-container').offset();
      container = angular.element('#angular-content > .hbox-panel > .tabs-container > ul');
      rtContainer = angular.element($window).width() - (containerPosition.left + angular.element('#angular-content > .hbox-panel > .tabs-container').outerWidth());
      if ($scope.activeIndex() >= 0) {
        idContent = "#" + $scope.tabs[$scope.activeIndex()].id + "_tab";
        elementPosition = angular.element(idContent).offset().left;
        if (elementPosition < containerPosition.left) {
          _ref = container.find('li');
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            a = _ref[i];
            if (i === 0) {
              continue;
            }
            rtElement = (angular.element($window).width() - (angular.element(a).offset().left + angular.element(a).outerWidth())) - (containerPosition.left - elementPosition);
            if (rtContainer + 30 > rtElement) {
              $scope.limitTabs = i - 1;
              break;
            }
          }
          container.css("left", (parseInt(container.css("left")) + (containerPosition.left - elementPosition)) + "px");
        } else {
          rtElement = angular.element($window).width() - (angular.element(idContent).offset().left + angular.element(idContent).outerWidth());
          if (rtContainer + 30 > rtElement) {
            $scope.limitTabs = $scope.activeIndex() + 1;
            container.css("left", (parseInt(container.css("left")) + rtElement - rtContainer - 30) + "px");
          }
        }
      }
    });
  }
]);
