// Generated by CoffeeScript 1.8.0

/*
   Service to control the tabs
 */
angular.module("ximdex.common.service").factory("xTabs", [
  "$window", "$timeout", "$http", "xUrlHelper", "$sce", "$rootScope", function($window, $timeout, $http, xUrlHelper, $sce, $rootScope) {
    var activeTab, tabs, visitedTabs, xtab;
    tabs = [];
    visitedTabs = [];
    activeTab = -1;

    /*$window.com.ximdex.triggerActionLoaded({
        actionView: this, hay que mirarlo
        browser: this.browser, liquidado
        context: this.content,
        url: this.url,
        action: action,
        nodes: this.nodes,
        tabId: this.tabId()
    })
     */
    xtab = {};
    xtab.getTabIndex = function(tabId) {
      var i, tab, _i, _len;
      for (i = _i = 0, _len = tabs.length; _i < _len; i = ++_i) {
        tab = tabs[i];
        if (tab.id === tabId) {
          return i;
        }
      }
      return -1;
    };
    xtab.bindFormEvents = function(indexTab, tab) {
      $timeout(function() {
        var fm, form, forms, i, _i, _len, _results;
        forms = angular.element("form", "#" + tab.id + "_content");
        _results = [];
        for (i = _i = 0, _len = forms.length; _i < _len; i = ++_i) {
          form = forms[i];
          _results.push(fm = new X.FormsManager({
            actionView: {
              action: tab.action
            },
            tabId: tab.id,
            actionContainer: angular.element("#" + tab.id + "_content"),
            form: angular.element(form)
          }));
        }
        return _results;
      }, 0);
    };
    xtab.submitForm = function(args) {
      $http({
        url: args.url,
        responseType: args.reload ? "" : "json",
        method: "POST",
        data: args.data,
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        }
      }).success(function(data) {
        var index;
        if (data) {
          index = xtab.getTabIndex(args.tabId);
          if (index < 0) {
            return;
          }
          if (args.reload === true) {
            tabs[index].content_untrusted = data;
            tabs[index].content = $sce.trustAsHtml(data);
            xtab.loadCssAndJs(tabs[index]);
            xtab.bindFormEvents(index, tabs[index]);
          }
          if (args.callback) {
            args.callback({
              data: data,
              tab: tabs[index]
            });
          }
        }
      }).error(function(error) {
        if (args.callback) {
          args.callback({
            error: true
          });
        }
      });
    };
    xtab.activeIndex = function() {
      return activeTab;
    };
    xtab.loadCssAndJs = function(tab) {
      var callback, content, cssArr, jsArr, jsObj, n, nodeids, _i, _len, _ref;
      cssArr = [];
      content = angular.element(tab.content_untrusted);
      content.first().children().each(function(index, item) {
        cssArr.push(angular.element(item).html());
      });
      Object.loadCss(cssArr);
      jsArr = [];
      content.first().next().children().each(function(index, item) {
        jsArr.push(angular.element(item).html());
      });
      nodeids = [];
      _ref = tab.nodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        nodeids.push(n.nodeid);
      }
      callback = function() {
        return $window.com.ximdex.triggerActionLoaded({
          title: "#" + tab.id + "_tab",
          context: "#" + tab.id + "_content",
          url: tab.url,
          action: tab.action,
          nodes: nodeids,
          tab: tab
        });
      };
      jsObj = {
        onComplete: callback,
        js: jsArr
      };
      if (jsArr.length > 0) {
        Object.loadScript(jsObj);
      } else {
        callback();
      }
    };

    /*
        Pushes a new tab
            action: object action
            nodes: array of nodes
     */
    xtab.pushTab = function(action, nodes) {
      var i, n, newid, tab, that, url, _i, _j, _len, _len1;
      newid = "";
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        n = nodes[_i];
        newid += n.nodeid + "_";
      }
      newid += action.command;
      for (i = _j = 0, _len1 = tabs.length; _j < _len1; i = ++_j) {
        tab = tabs[i];
        if (tab.id === newid) {
          this.highlightTab(i);
          return;
        }
      }
      that = this;
      url = xUrlHelper.getAction({
        action: action.command,
        nodes: nodes,
        module: action.module,
        method: action.method
      });
      $http.get(url).success(function(data) {
        var newlength, newtab;
        if (data) {
          newtab = {
            id: newid,
            name: action.name,
            content_untrusted: data,
            content: $sce.trustAsHtml(data),
            nodes: nodes,
            action: action,
            command: action.command,
            blink: false,
            show: true,
            url: url
          };
          that.loadCssAndJs(newtab);
          newlength = tabs.push(newtab);
          that.setActive(newlength - 1);
          xtab.bindFormEvents(newlength - 1, newtab);
          $timeout(function() {
            return $rootScope.$broadcast('onModifyTabs');
          }, 0);
        }
      });
    };

    /*
        Returns the tabs
     */
    xtab.getTabs = function() {
      return tabs;
    };
    xtab.removeTab = function(index) {
      var i, tab, visitedIndex, _i, _len;
      visitedIndex = visitedTabs.indexOf(index);
      if (visitedIndex >= 0) {
        visitedTabs.splice(visitedIndex, 1);
        for (i = _i = 0, _len = visitedTabs.length; _i < _len; i = ++_i) {
          tab = visitedTabs[i];
          if (visitedTabs[i] > index) {
            visitedTabs[i] = visitedTabs[i] - 1;
          }
        }
      }
      tabs.splice(index, 1);
      if (visitedTabs.length > 0) {
        activeTab = visitedTabs[0];
        $timeout(function() {
          return $rootScope.$broadcast('onChangeActiveTab');
        }, 0);
      } else {
        activeTab = -1;
      }
      $timeout(function() {
        return $rootScope.$broadcast('onModifyTabs');
      }, 400);
    };

    /*
        Set active a tab
            index: the index of the tab
     */
    xtab.setActive = function(index) {
      var visitedIndex;
      activeTab = index;
      visitedIndex = visitedTabs.indexOf(index);
      if (visitedIndex >= 0) {
        visitedTabs.splice(visitedIndex, 1);
      }
      visitedTabs.unshift(index);
      $timeout(function() {
        return $rootScope.$broadcast('onChangeActiveTab');
      }, 0);
    };

    /*
        Highlights a tab (usually when we open a existing tab)
            index: the index of the tab
     */
    xtab.highlightTab = function(index) {
      if (tabs[index].blink === true) {
        return;
      }
      tabs[index].blink = true;
      return $timeout(function() {
        return tabs[index].blink = false;
      }, 2000);
    };

    /*
        Closes all tabs
     */
    xtab.closeAll = function() {
      tabs.splice(0, tabs.length);
      activeTab = -1;
      visitedTabs = [];
      $timeout(function() {
        return $rootScope.$broadcast('onModifyTabs');
      }, 400);
    };

    /*
        Deactivates all tabs
     */
    xtab.offAll = function() {
      activeTab = -1;
    };
    xtab.removeTabById = function(tabId) {
      var index;
      index = xtab.getTabIndex(tabId);
      if (index >= 0) {
        return xtab.removeTab(index);
      }
    };
    xtab.reloadTab = function(index) {
      var tab, url;
      tab = tabs[tabId];
      url = xUrlHelper.getAction({
        action: tab.action.command,
        nodes: tab.nodes,
        module: tab.action.module,
        method: tab.action.method
      });
      $http.get(url).success(function(data) {
        if (data) {
          tab.content_untrusted = data;
          tab.content = $sce.trustAsHtml(data);
          xtab.loadCssAndJs(tab);
          xtab.bindFormEvents(index, tab);
        }
      });
    };
    xtab.reloadTabById = function(idTab) {
      var index;
      index = xtab.getTabIndex(idTab);
      if (index >= 0) {
        xtab.reloadTab(index);
      }
    };
    return xtab;
  }
]);
