// Generated by CoffeeScript 1.8.0
angular.module("ximdex.common.service").factory("xTabs", [
  "$window", "$timeout", "$http", "xUrlHelper", "$rootScope", "$compile", function($window, $timeout, $http, xUrlHelper, $rootScope, $compile) {
    var activeTab, bindFormEvents, postLoadJs, tabs, visitedTabs, xtab;
    tabs = [];
    visitedTabs = [];
    activeTab = -1;
    bindFormEvents = function(tab) {
      var form, forms, i, _i, _len;
      forms = angular.element("form", "#" + tab.id + "_content");
      if (forms.length === 0) {
        new X.FormsManager({
          actionView: {
            action: tab.action
          },
          tabId: tab.id,
          actionContainer: angular.element("#" + tab.id + "_content")
        });
      } else {
        for (i = _i = 0, _len = forms.length; _i < _len; i = ++_i) {
          form = forms[i];
          new X.FormsManager({
            actionView: {
              action: tab.action
            },
            tabId: tab.id,
            actionContainer: angular.element("#" + tab.id + "_content"),
            form: angular.element(form)
          });
        }
      }
    };
    xtab = {};
    xtab.getTabIndex = function(tabId) {
      var i, tab, _i, _len;
      for (i = _i = 0, _len = tabs.length; _i < _len; i = ++_i) {
        tab = tabs[i];
        if (tab.id === tabId) {
          return i;
        }
      }
      return -1;
    };
    xtab.submitForm = function(args) {
      $http({
        url: args.url,
        responseType: args.reload ? "" : "json",
        method: "POST",
        data: args.data,
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        }
      }).success(function(data) {
        var index;
        if (data) {
          index = xtab.getTabIndex(args.tabId);
          if (index < 0) {
            return;
          }
          if (args.reload === true) {
            tabs[index].content = data;
            xtab.loadCssAndJs(tabs[index]);
          }
          if (args.callback) {
            args.callback({
              data: data,
              tab: tabs[index]
            });
          }
        }
      }).error(function(error) {
        if (args.callback) {
          args.callback({
            error: true
          });
        }
      });
    };
    xtab.activeIndex = function() {
      return activeTab;
    };
    postLoadJs = function(tab, nodeids, postCompile) {
      var container, scope;
      if (postCompile) {
        container = angular.element("#" + tab.id + "_content");
        scope = container.scope();
        container.html($compile(tab.content)(scope));
      }
      bindFormEvents(tab);
      return $window.com.ximdex.triggerActionLoaded({
        title: "#" + tab.id + "_tab",
        context: "#" + tab.id + "_content",
        url: tab.url,
        action: tab.action,
        nodes: nodeids,
        tab: tab
      });
    };
    xtab.loadCssAndJs = function(tab) {
      $timeout(function() {
        var callback, compiled, container, content, cssArr, jsArr, jsObj, n, nodeids, postCompile, scope, _i, _len, _ref;
        cssArr = [];
        content = angular.element(tab.content);
        content.first().children().each(function(index, item) {
          cssArr.push(angular.element(item).html());
        });
        Object.loadCss(cssArr);
        jsArr = [];
        content.first().next().children().each(function(index, item) {
          jsArr.push(angular.element(item).html());
        });
        nodeids = [];
        _ref = tab.nodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          nodeids.push(n.nodeid);
        }
        container = angular.element("#" + tab.id + "_content");
        scope = container.scope().$new();
        scope.$on('$destroy', function() {
          return angular.element("#" + tab.id + "_content").remove();
        });
        postCompile = false;
        try {
          compiled = $compile(tab.content)(scope);
          container.html(compiled);
          postCompile = false;
        } catch (_error) {
          postCompile = true;
        }
        callback = function() {
          postLoadJs(tab, nodeids, postCompile);
        };
        jsObj = {
          onComplete: callback,
          js: jsArr
        };
        if (jsArr.length > 0) {
          return Object.loadScript(jsObj);
        } else {
          return callback();
        }
      }, 0);
    };
    xtab.pushTab = function(action, nodes) {
      var i, n, newid, tab, url, _i, _j, _len, _len1;
      newid = "";
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        n = nodes[_i];
        newid += n.nodeid + "_";
      }
      newid += action.command;
      for (i = _j = 0, _len1 = tabs.length; _j < _len1; i = ++_j) {
        tab = tabs[i];
        if (tab.id === newid) {
          xtab.highlightTab(i);
          return;
        }
      }
      url = xUrlHelper.getAction({
        action: action.command,
        nodes: nodes,
        module: action.module,
        method: action.method,
        options: action.params
      });
      $http.get(url).success(function(data) {
        var newlength, newtab;
        if (data) {
          newtab = {
            id: newid,
            name: action.name,
            content: data,
            nodes: nodes,
            action: action,
            command: action.command,
            blink: false,
            show: true,
            url: url
          };
          xtab.loadCssAndJs(newtab);
          newlength = tabs.push(newtab);

          /*$timeout(
              () ->
                  $rootScope.$broadcast('updateTabsPosition')
          ,
              0
          )
           */
          xtab.setActive(newlength - 1);
        }
      });
    };
    xtab.getTabs = function() {
      return tabs;
    };
    xtab.removeTab = function(index) {
      var deletedTab, i, tab, visitedIndex, _i, _len;
      visitedIndex = visitedTabs.indexOf(index);
      if (visitedIndex >= 0) {
        visitedTabs.splice(visitedIndex, 1);
        for (i = _i = 0, _len = visitedTabs.length; _i < _len; i = ++_i) {
          tab = visitedTabs[i];
          if (visitedTabs[i] > index) {
            visitedTabs[i] = visitedTabs[i] - 1;
          }
        }
      }
      deletedTab = (tabs.splice(index, 1))[0];
      if (visitedTabs.length > 0) {
        activeTab = visitedTabs[0];
        $timeout(function() {
          return $rootScope.$broadcast('updateTabsPosition', deletedTab);
        }, 0);
      } else {
        activeTab = -1;
      }

      /*$timeout(
          () ->
              $rootScope.$broadcast('updateTabsPosition')
      ,
          400
      )
       */
    };
    xtab.setActive = function(index) {
      var visitedIndex;
      activeTab = index;
      visitedIndex = visitedTabs.indexOf(index);
      if (visitedIndex >= 0) {
        visitedTabs.splice(visitedIndex, 1);
      }
      visitedTabs.unshift(index);
      $timeout(function() {
        $rootScope.$broadcast('updateTabsPosition');
      }, 0);
    };
    xtab.highlightTab = function(index) {
      if (tabs[index].blink === true) {
        return;
      }
      tabs[index].blink = true;
      return $timeout(function() {
        return tabs[index].blink = false;
      }, 2000);
    };
    xtab.closeAll = function() {
      tabs.splice(0, tabs.length);
      activeTab = -1;
      visitedTabs = [];
      $timeout(function() {
        return $rootScope.$broadcast('updateTabsPosition');
      }, 400);
    };
    xtab.offAll = function() {
      activeTab = -1;
    };
    xtab.removeTabById = function(tabId) {
      var index;
      index = xtab.getTabIndex(tabId);
      if (index >= 0) {
        return xtab.removeTab(index);
      }
    };
    xtab.reloadTab = function(index) {
      var tab, url;
      tab = tabs[tabId];
      url = xUrlHelper.getAction({
        action: tab.action.command,
        nodes: tab.nodes,
        module: tab.action.module,
        method: tab.action.method
      });
      $http.get(url).success(function(data) {
        if (data) {
          tab.content = data;
          xtab.loadCssAndJs(tab);
        }
      });
    };
    xtab.reloadTabById = function(tabId) {
      var index;
      index = xtab.getTabIndex(tabId);
      if (index >= 0) {
        xtab.reloadTab(index);
      }
    };
    return xtab;
  }
]);
