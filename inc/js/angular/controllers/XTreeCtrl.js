// Generated by CoffeeScript 1.8.0

/**
\details &copy; 2011  Open Ximdex Evolution SL [http://www.ximdex.org]

Ximdex a Semantic Content Management System (CMS)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

See the Affero GNU General Public License for more details.
You should have received a copy of the Affero GNU General Public License
version 3 along with Ximdex (see LICENSE file).

If not, visit http://gnu.org/licenses/agpl-3.0.html.

@author Ximdex DevTeam <dev@ximdex.com>
@version $Revision$
 */
angular.module("ximdex.main.controller").controller("XTreeCtrl", [
  "$scope", "$attrs", "xBackend", "xTranslate", "$window", "$http", "xUrlHelper", "xMenu", function($scope, $attrs, xBackend, xTranslate, $window, $http, xUrlHelper, xMenu) {
    var loadAction;
    $scope.nodetypeActions = [];
    $scope.selectedNodes = [];
    $scope.selectedTab = 1;
    loadAction = function(action, node) {
      console.log("LOADING", action);

      /*openAction(
          label: action.name,
          name:  action.name,
          command: action.command,
          params: 'method='+action.command+'&nodeid='+node.nodeid,
          nodes: node.nodeid,
          url: X.restUrl + '?action='+action.command+'&nodes[]='+node.nodeid+'&nodeid='+node.nodeid,
          bulk: action.bulk
      ,
          node.nodeid
      )
      $('#bw1').browserwindow(
          'openAction'
      ,
          label: action.name,
          name:  action.name,
          command: action.command,
          params: 'method='+action.command+'&nodeid='+node.nodeid,
          nodes: node.nodeid,
          url: X.restUrl + '?action='+action.command+'&nodes[]='+node.nodeid+'&nodeid='+node.nodeid,
          bulk: action.bulk
      ,
          node.nodeid
      )
       */
    };
    $scope.twoLevelLoad = true;
    $http.get(xUrlHelper.getAction({
      action: "browser3",
      method: "nodetypes"
    })).success(function(data) {
      var i;
      if (data && data.nodetypes) {
        $scope.nodetypes = data.nodetypes;
        $scope.nodetypes = {};
        i = data.nodetypes.length - 1;
        while (i >= 0) {
          $scope.nodetypes[data.nodetypes[i].idnodetype] = data.nodetypes[i];
          i--;
        }
      }
    });
    $http.get(xUrlHelper.getAction({
      action: "browser3",
      method: "read",
      id: "10000"
    })).success(function(data) {
      if (data) {
        $scope.projects = data;
      }
    });
    $http.get(xUrlHelper.getAction({
      action: "browser3",
      method: "read",
      id: "2"
    })).success(function(data) {
      if (data) {
        $scope.ccenter = data;
      }
    });
    $http.get(xUrlHelper.getAction({
      action: "moduleslist",
      method: "readModules"
    })).success(function(data) {
      if (data) {
        $scope.modules = data;
      }
    });
    $scope.toggleNode = function(node) {
      node.showNodes = !node.showNodes;
      if (node.showNodes && !node.collection) {
        $scope.loadChilds(node);
      }
    };
    $scope.loadChilds = function(node) {
      $scope.loadNodeChilds(node, function(nodes) {
        if ($scope.twoLevelLoad) {
          $scope.loadNodesChilds(nodes);
        }
      });
    };
    $scope.loadNodeChilds = function(node, callback) {
      if (node.children && !node.loading) {
        node.loading = true;
        $http.get(xUrlHelper.getAction({
          action: "browser3",
          method: "read",
          id: node.nodeid
        })).success(function(data) {
          node.loading = false;
          if (data) {
            node.collection = data.collection;
            if (callback) {
              callback(node.collection);
            }
          }
        }).error(function(data) {
          node.loading = false;
        });
      }
    };
    $scope.loadNodesChilds = function(nodes) {
      var i;
      if (nodes.length < 10) {
        i = nodes.length - 1;
        while (i >= 0) {
          $scope.loadNodeChilds(nodes[i]);
          i--;
        }
      }
    };
    $scope.loadActions = function(node, event) {
      var data;
      if ($scope.nodetypeActions[node.nodetypeid] == null) {
        $http.get(xUrlHelper.getAction({
          action: "browser3",
          method: "cmenu",
          id: node.nodeid
        })).success(function(data) {
          if (data) {
            $scope.nodetypeActions[node.nodetypeid] = data;
            data.left = event.clientX;
            data.top = event.clientY;
            if (event.button === 2) {
              data.expanded = "true";
            } else {
              data.expanded = "false";
            }
            xMenu.open(data, node, loadAction);
          }
        });
      } else {
        data = $scope.nodetypeActions[node.nodetypeid];
        data.left = event.clientX;
        data.top = event.clientY;
        if (event.button === 2) {
          data.expanded = "true";
        } else {
          data.expanded = "false";
        }
        xMenu.open(data, node, loadAction);
      }
      event.stopPropagation();
    };
    $window.com.ximdex.emptyActionsCache = function() {
      $scope.nodetypeActions = [];
    };
    $scope.select = function(node, event) {
      var k, n, _ref;
      if (event.ctrlKey) {
        _ref = $scope.selectedNodes;
        for (k in _ref) {
          n = _ref[k];
          if (n.nodeid === node.nodeid) {
            $scope.selectedNodes.splice(k, 1);
            return;
          }
        }
        $scope.selectedNodes.push(node);
      } else {
        $scope.selectedNodes = [node];
      }
    };
    $scope.reloadNode = function() {
      if ($scope.selectedNodes.length === 1) {
        $scope.selectedNodes[0].showNodes = true;
        $scope.selectedNodes[0].collection = [];
        return $scope.loadChilds($scope.selectedNodes[0]);
      }
    };
    return $scope.doFilter = function() {
      var url;
      if ($scope.filter === "") {
        $http.get(xUrlHelper.getAction({
          action: "browser3",
          method: "read",
          id: "10000"
        })).success(function(data) {
          if (data) {
            $scope.projects = data;
          }
        });
      } else if ($scope.filter.length > 2) {
        url = xUrlHelper.getAction({
          action: "browser3",
          method: "readFiltered",
          id: "10000"
        }) + "&query=" + $scope.filter;
        $http.get(url).success(function(data) {
          if (data) {
            $scope.projects = data;
          }
        });
      }
      $scope.selectedNodes = [];
    };
  }
]);

angular.module("ximdex.main.controller").filter("nodeInArrayProp", function() {
  return function(input, arr, prop) {
    var a, _i, _len;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      a = arr[_i];
      if (a[prop] === input) {
        return true;
      }
    }
    return false;
  };
});
