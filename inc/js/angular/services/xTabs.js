// Generated by CoffeeScript 1.8.0
angular.module("ximdex.common.service").factory("xTabs", [
  "$window", "$timeout", "$http", "xUrlHelper", "$sce", "$rootScope", function($window, $timeout, $http, xUrlHelper, $sce, $rootScope) {
    var tabs, visitedTabs;
    tabs = [];
    visitedTabs = [];

    /*$window.com.ximdex.triggerActionLoaded({
        actionView: this,
        browser: this.browser,
        context: this.content,
        url: this.url,
        action: action,
        nodes: this.nodes,
        tabId: this.tabId()
    })
     */
    return {
      loadCssAndJs: function(content) {
        var cssArr;
        cssArr = [];
        angular.element(content).first().children().each(function(index, item) {
          cssArr.push(angular.element(item).html());
        });
        Object.loadCss(cssArr);

        /*jsArr = []
        angular.element(content).first().next().children().each (index, item) ->
            jsArr.push angular.element(item).html()
            return
        
        jsObj =
            onComplete: _onAssetsCompleted()
            js: jsArr
        if jsArr.length > 0
            Object.loadScript jsObj
        else
            this._onAssetsCompleted()
         */
      },
      pushTab: function(action, nodes) {
        var i, n, newid, tab, that, _i, _j, _len, _len1;
        newid = "";
        for (_i = 0, _len = nodes.length; _i < _len; _i++) {
          n = nodes[_i];
          newid += n.nodeid + "_";
        }
        newid += action.command;
        for (i = _j = 0, _len1 = tabs.length; _j < _len1; i = ++_j) {
          tab = tabs[i];
          if (tab.id === newid) {
            this.highlightTab(i);
            return;
          }
        }
        that = this;
        $http.get(xUrlHelper.getAction({
          action: action.command,
          nodes: nodes,
          module: action.module
        })).success(function(data) {
          var newlength, newtab, _k, _len2;
          if (data) {
            newtab = {
              id: newid,
              name: action.name,
              content_untrusted: data,
              content: $sce.trustAsHtml(data),
              nodes: nodes,
              command: action.command,
              blink: false,
              active: true
            };
            that.loadCssAndJs(data);
            for (i = _k = 0, _len2 = tabs.length; _k < _len2; i = ++_k) {
              tab = tabs[i];
              tabs[i].active = false;
            }
            newlength = tabs.push(newtab);
            that.setActive(newlength - 1);
            $timeout(function() {
              return $rootScope.$broadcast('modifiedTabs');
            }, 0);
          }
        });
      },
      getTabs: function() {
        return tabs;
      },
      removeTab: function(index) {
        var i, tab, visitedIndex, _i, _j, _len, _len1;
        visitedIndex = visitedTabs.indexOf(index);
        if (visitedIndex >= 0) {
          visitedTabs.splice(visitedIndex, 1);
          for (i = _i = 0, _len = visitedTabs.length; _i < _len; i = ++_i) {
            tab = visitedTabs[i];
            if (visitedTabs[i] > index) {
              visitedTabs[i] = visitedTabs[i] - 1;
            }
          }
        }
        tabs.splice(index, 1);
        if (visitedTabs.length > 0) {
          for (i = _j = 0, _len1 = tabs.length; _j < _len1; i = ++_j) {
            tab = tabs[i];
            if (i === visitedTabs[0]) {
              tabs[i].active = true;
              visitedIndex = visitedTabs.indexOf(i);
              if (visitedIndex >= 0) {
                visitedTabs.splice(visitedIndex, 1);
              }
              visitedTabs.unshift(i);
            } else {
              tabs[i].active = false;
            }
          }
        }
        $timeout(function() {
          return $rootScope.$broadcast('modifiedTabs');
        }, 400);
      },
      setActive: function(index) {
        var i, tab, visitedIndex, _i, _len;
        for (i = _i = 0, _len = tabs.length; _i < _len; i = ++_i) {
          tab = tabs[i];
          if (i === index) {
            tabs[i].active = true;
            visitedIndex = visitedTabs.indexOf(i);
            if (visitedIndex >= 0) {
              visitedTabs.splice(visitedIndex, 1);
            }
            visitedTabs.unshift(i);
          } else {
            tabs[i].active = false;
          }
        }
      },
      highlightTab: function(index) {
        if (tabs[index].blink === true) {
          return;
        }
        tabs[index].blink = true;
        return $timeout(function() {
          return tabs[index].blink = false;
        }, 2000);
      },
      closeAll: function() {
        tabs.splice(0, tabs.length);
        visitedTabs = [];
        $timeout(function() {
          return $rootScope.$broadcast('modifiedTabs');
        }, 400);
      },
      offAll: function() {
        var i, tab, _i, _len;
        for (i = _i = 0, _len = tabs.length; _i < _len; i = ++_i) {
          tab = tabs[i];
          tabs[i].active = false;
        }
      },
      getActiveIndex: function() {
        var i, tab, _i, _len;
        for (i = _i = 0, _len = tabs.length; _i < _len; i = ++_i) {
          tab = tabs[i];
          if (tab.active === true) {
            return i;
          }
        }
        return -1;
      }
    };
  }
]);
